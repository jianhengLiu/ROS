// Generated by gencpp from file plan_manage/Bspline.msg
// DO NOT EDIT!


#ifndef PLAN_MANAGE_MESSAGE_BSPLINE_H
#define PLAN_MANAGE_MESSAGE_BSPLINE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace plan_manage
{
template <class ContainerAllocator>
struct Bspline_
{
  typedef Bspline_<ContainerAllocator> Type;

  Bspline_()
    : order(0)
    , traj_id(0)
    , knots()
    , pts()
    , start_time()  {
    }
  Bspline_(const ContainerAllocator& _alloc)
    : order(0)
    , traj_id(0)
    , knots(_alloc)
    , pts(_alloc)
    , start_time()  {
  (void)_alloc;
    }



   typedef int32_t _order_type;
  _order_type order;

   typedef int64_t _traj_id_type;
  _traj_id_type traj_id;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _knots_type;
  _knots_type knots;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _pts_type;
  _pts_type pts;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;





  typedef boost::shared_ptr< ::plan_manage::Bspline_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_manage::Bspline_<ContainerAllocator> const> ConstPtr;

}; // struct Bspline_

typedef ::plan_manage::Bspline_<std::allocator<void> > Bspline;

typedef boost::shared_ptr< ::plan_manage::Bspline > BsplinePtr;
typedef boost::shared_ptr< ::plan_manage::Bspline const> BsplineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_manage::Bspline_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_manage::Bspline_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace plan_manage

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'plan_manage': ['/home/chrisliu/ROS/HKUST_ws/src/Fast-Planner/dyn_planner/plan_manage/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::plan_manage::Bspline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_manage::Bspline_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_manage::Bspline_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_manage::Bspline_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_manage::Bspline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_manage::Bspline_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_manage::Bspline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ae0a2f5019a8a20108147f57eefee55";
  }

  static const char* value(const ::plan_manage::Bspline_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ae0a2f5019a8a20ULL;
  static const uint64_t static_value2 = 0x108147f57eefee55ULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_manage::Bspline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_manage/Bspline";
  }

  static const char* value(const ::plan_manage::Bspline_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_manage::Bspline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 order\n\
int64 traj_id\n\
float64[] knots\n\
geometry_msgs/Point[] pts\n\
time start_time\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::plan_manage::Bspline_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_manage::Bspline_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.order);
      stream.next(m.traj_id);
      stream.next(m.knots);
      stream.next(m.pts);
      stream.next(m.start_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bspline_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_manage::Bspline_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_manage::Bspline_<ContainerAllocator>& v)
  {
    s << indent << "order: ";
    Printer<int32_t>::stream(s, indent + "  ", v.order);
    s << indent << "traj_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.traj_id);
    s << indent << "knots[]" << std::endl;
    for (size_t i = 0; i < v.knots.size(); ++i)
    {
      s << indent << "  knots[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.knots[i]);
    }
    s << indent << "pts[]" << std::endl;
    for (size_t i = 0; i < v.pts.size(); ++i)
    {
      s << indent << "  pts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pts[i]);
    }
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_MANAGE_MESSAGE_BSPLINE_H
